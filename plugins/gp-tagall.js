const config = require('../config')
const { cmd, commands } = require('../command')
const { getBuffer, getGroupAdmins, getRandom, h2k, isUrl, Json, runtime, sleep, fetchJson } = require('../lib/functions')

cmd({
    pattern: "tagall",
    react: "üìá",
    alias: ["gc_tagall", "appel", "rele"],
    desc: "To Tag all Members",
    category: "group",
    use: '.tagall [message]',
    filename: __filename
},
    async (conn, mek, m, { from, participants, reply, isGroup, senderNumber, groupAdmins, prefix, command, args, body }) => {
        try {
            if (!isGroup) return reply("‚ùå This command can only be used in groups.");

            const botOwner = conn.user.id.split(":")[0]; // Extract bot owner's number
            const senderJid = senderNumber + "@s.whatsapp.net";

            if (!groupAdmins.includes(senderJid) && senderNumber !== botOwner) {
                return reply("‚ùå Only group admins or the bot owner can use this command.");
            }

            // Fetch group metadata
            let groupInfo = await conn.groupMetadata(from).catch(() => null);
            if (!groupInfo) return reply("‚ùå Failed to fetch group information.");

            let groupName = groupInfo.subject || "Unknown Group";
            let totalMembers = participants ? participants.length : 0;
            if (totalMembers === 0) return reply("‚ùå No members found in this group.");

            let emojis = ['*‚îú‚ùí‚îÉ‚û¢ü™ê*', '*‚îú‚ùí‚îÉ‚û¢üçÅ*', '*‚îú‚ùí‚îÉ‚û¢üí•*', '*‚îú‚ùí‚îÉ‚û¢ü©∏*', '*‚îú‚ùí‚îÉ‚û¢‚ùÑÔ∏è*', '*‚îú‚ùí‚îÉ‚û¢üï∏Ô∏è*'];
            let randomEmoji = emojis[Math.floor(Math.random() * emojis.length)];

            // Extract message
            let message = body.slice(body.indexOf(command) + command.length).trim();
            if (!message) message = " ú·¥á ü ü·¥è ·¥á·¥†·¥á Ä è·¥è…¥·¥á";

            // Get admins list
            const adminList = participants
                .filter(p => p.admin !== null)
                .map(p => `@${p.id.split('@')[0]}`)
                .join(', ');

            const formattedAdmins = adminList || 'Unknown';

            // Start building message
            let teks = `*‚ï≠‚ïº‚îÅ‚îÅ‚îÅ‚îÅ‚ßº·¥ç·¥á…¥·¥õ…™·¥è…¥s‚ßΩ‚îÅ‚îÅ‚îÅ‚îÅ‚ïæ‚ïÆ*
*‚îÇüë•…¢ Ä·¥è·¥ú·¥ò: ${groupName}*
*‚îÇüé∞·¥ç·¥á·¥ç ô·¥á Äs: ${totalMembers}*
*‚îÇüìù·¥ç·¥áss·¥Ä…¢·¥á: ${message}*
*‚îÇüõ°Ô∏è·¥Ä·¥Ö·¥ç…™…¥s: ${formattedAdmins}*
*‚ï∞‚ïº‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïæ‚ïØ*

*‚ï≠‚ïº‚îâ‚îâ‚îâ‚îâ„Äî·¥õ·¥Ä…¢·¥Ä ü üs„Äï‚îâ‚îâ‚îâ‚îâ‚ïÆ*
`;

            for (let mem of participants) {
                if (!mem.id) continue;
                teks += `${randomEmoji} @${mem.id.split('@')[0]}\n`;
            }

            teks += "*‚îî‚ïº‚îâ‚îâ‚îâ‚ú™ ùêâùêÑùêíùêîùêí-ùêÇùêëùêÄùêíùêá-ùêïùüè ‚ú™‚îâ‚îâ‚îâ*";

            conn.sendMessage(from, { text: teks, mentions: participants.map(a => a.id) }, { quoted: mek });

        } catch (e) {
            console.error("TagAll Error:", e);
            reply(`‚ùå *Error Occurred !!*\n\n${e.message || e}`);
        }
    });
